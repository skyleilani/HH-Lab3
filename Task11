#!/usr/bin/python3
# Josie Bunnell (Josephinebunnell@bennington.edu) ; Sky Leilani (skyleilani@bennington.edu) 
# Date Created : 03.18.2019 
# 


import smbus 
import RPi.GPIO as GPIO 

GPIO.setmode(GPIO.BOARD)

DEVICE_ADDRESS = 0x48 # The address of the i2c device in hex without the r/w bit 
CONFIG_REGISTER = 0x01
CONVERSION_REGISTER = 0x00 

bus = smbus.SMBus(1) # connects to i2C channel 1 and GPIO i2C pins

# configure_adc - task 9 -  
# Returns - nothing
# Param - bus : connection to i2C channel and GPIO i2C pins (Device) 

def configure_adc(bus):
  
  config_bytes = [ 0xC4, 0x83 ] # MSB, LSB in hex 
  bus.write_i2c_block_data(DEVICE_ADDRESS, CONFIG_REGISTER, config_bytes)
  
  
# get_raw_adc_reading(my_bus) - task 10 - sets address pointer register (DEVICE_ADDRESS)
# Returns : raw ADC reading 
# Param : my_bus - smbus i2c object to write to 

def get_raw_adc_reading(bus):
  
  raw_reading = bus.read_i2c_block_data(DEVICE_ADDRESS, CONVERSION_REGISTER)
  MSB = raw_reading[0] << 8 
  RAW = MSB + raw_reading[1]
  
  print("Least significant byte is... ")
  print(raw_reading[1])
  
  print("LSB in hex is " + str(hex(raw_reading[1]) + "... \n")
  print("LSB in binary is " + str(bin(raw_reading[1]) + "... \n")
     
  
  print("Most significant byte is...")
  print(MSB)
  
  print("MSB in hex is " + str(hex(MSB)) + "... \n")
  print("MSB in binary is " + str(bin(MSB)) + "... \nn")
        
  print("The combined bytes are (MSB + LSB) ... ")
  print(RAW)
  print("The combined bytes in hex are " + str(hex(RAW)) + "... \n")
  print("and in binary, they're " + str(bin(RAW)) + "... \n")
  
  return RAW
  
  
# convert_raw_reading(reading) - task 11 - takes raw ADC reading and converts to voltage 
# Returns : raw_reading - ADC reading in Volts 
# Param : reading - ADC's raw reading 

def convert_raw_reading(RAW)
     
  voltage = 0.000076 * RAW 
  print("Voltage reading is... ")
  print(voltage)
     
  return voltage
        
  
def convert_voltage_to_temp(voltage):
  input_volt = 5
  resistor = 220
  inp_and_resistor = 1100
        
  therm_resistance = inp_and_resistor - resistor * voltage 
  therm_res = therm_resistance / voltage 
        
  print(therm_res)
                

configure_adc(bus)
adc_reading = get_raw_adc_reading(bus)
  
voltage_reading = convert_raw_reading(adc_reading)

convert_voltage_to_temp(voltage_reading)
        

if bin(adc_reading) >= 1000000000000000: 
  print("The reading I'm getting is" + str(bin(adc_reading)) + "but...")
  print("yknow... note that I'm changing this to zero...\n ...so it's zero now...") 
  bin(adc_reading) = 0000000000000000
        
else: 
        
  print(adc_reading)
        
      
       
        
